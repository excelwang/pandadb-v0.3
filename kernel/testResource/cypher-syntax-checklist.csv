ID,Type,TestQuery,PandaDB isSupport
s-1,create,"CREATE (n),(m)",
s-2,create,"CREATE (friend:Person {name: 'Mark'})
RETURN friend",
s-3,create,"MATCH (jennifer:Person {name: 'Jennifer'})
MATCH (mark:Person {name: 'Mark'})
CREATE (jennifer)-[rel:IS_FRIENDS_WITH]->(mark)",
s-4,create,CREATE (p:Person)-[:LIKES]->(t:Technology),
s-5,create,CREATE CONSTRAINT ON (n:Person) ASSERT n.name IS UNIQUE;,
s-6,create,"MATCH (a:Person),(b:Person)
WHERE a.name = 'A' AND b.name = 'B'
CREATE (a)-[r:RELTYPE { name: a.name + '<->' + b.name }]->(b)
RETURN type(r), r.name",
s-7,create,"CREATE p =(andy { name:'Andy' })-[:WORKS_AT]->(neo)<-[:WORKS_AT]-(michael { name: 'Michael' })
RETURN p",
s-8,MATCH,match (n:t2) return n,
s-9,MATCH,match (n:person:t1) return n,
s-10,MATCH,match (n) where n.name='bluejoe' return n,
s-11,MATCH,"match (m)-[r]->(n) return m,r,n",
s-12,MATCH,match (n)-[r]-(m) return distinct r,
s-13,MATCH,return 1 as N,
s-14,MATCH,return 1,
s-15,MATCH,"MATCH (jenn:Person {name: 'Jennifer'})
RETURN jenn",
s-16,MATCH,"MATCH (:Person {name: 'Jennifer'})-[:WORKS_FOR]->(company:Company)
RETURN company",
s-17,MATCH,"MATCH (:Person {name: 'Jennifer'})-[:WORKS_FOR]->(company:Company)
RETURN company.name",
s-18,MATCH,"MATCH (kristen:Customer {name:'Kristen'})-[rel:PURCHASED]-(order:Order)
RETURN order.orderId, order.orderDate, kristen.customerIdNo, order.orderTotalNoOfItems",
s-19,MATCH,"MATCH (kristen:Customer {name:'Kristen'})-[rel:PURCHASED]-(order:Order)
RETURN order.orderId AS OrderID, order.orderDate AS `Purchase Date`,
       kristen.customerIdNo AS CustomerID, order.orderNumOfLineItems AS `Number Of Items`",
s-20,update,"MATCH (p:Person {name: 'Jennifer'})
SET p.birthdate = date('1980-01-01')
RETURN p",
s-21,update,"MATCH (:Person {name: 'Jennifer'})-[rel:WORKS_FOR]-(:Company {name: 'Neo4j'})
SET rel.startYear = date({year: 2018})
RETURN rel",
s-22,delete,"MATCH (j:Person {name: 'Jennifer'})-[r:IS_FRIENDS_WITH]->(m:Person {name: 'Mark'})
DELETE r",
s-23,delete,"MATCH (m:Person {name: 'Mark'})
DELETE m",
s-24,delete,"MATCH (m:Person {name: 'Mark'})
DETACH DELETE m",
s-25,delete,"MATCH (n:Person {name: 'Jennifer'})
REMOVE n.birthdate",
s-26,delete,"MATCH (n:Person {name: 'Jennifer'})
SET n.birthdate = null",
s-27,merge,"MERGE (mark:Person {name: 'Mark'})
RETURN mark",
s-28,merge,"MATCH (j:Person {name: 'Jennifer'})
MATCH (m:Person {name: 'Mark'})
MERGE (j)-[r:IS_FRIENDS_WITH]->(m)
RETURN j, r, m",
s-29,merge,"MERGE (keanu:Person { name: 'Keanu Reeves' })
ON CREATE SET keanu.created = timestamp()
RETURN keanu.name, keanu.created",
s-30,merge,"MERGE (person:Person)
ON MATCH SET person.found = TRUE RETURN person.name, person.found",
s-31,merge,"MERGE (keanu:Person { name: 'Keanu Reeves' })
ON CREATE SET keanu.created = timestamp()
ON MATCH SET keanu.lastSeen = timestamp()
RETURN keanu.name, keanu.created, keanu.lastSeen",
s-32,merge,"MERGE (person:Person)
ON MATCH SET person.found = TRUE , person.lastAccessed = timestamp()
RETURN person.name, person.found, person.lastAccessed",
s-33,merge,"MATCH (charlie:Person { name: 'Charlie Sheen' }),(wallStreet:Movie { title: 'Wall Street' })
MERGE (charlie)-[r:ACTED_IN]->(wallStreet)
RETURN charlie.name, type(r), wallStreet.title",
s-34,merge,"MATCH (oliver:Person { name: 'Oliver Stone' }),(reiner:Person { name: 'Rob Reiner' })
MERGE (oliver)-[:DIRECTED]->(movie:Movie)<-[:ACTED_IN]-(reiner)
RETURN movie",
s-35,merge,"MATCH (charlie:Person { name: 'Charlie Sheen' }),(oliver:Person { name: 'Oliver Stone' })
MERGE (charlie)-[r:KNOWS]-(oliver)
RETURN r",
s-36,merge,"MATCH (person:Person)
MERGE (city:City { name: person.bornIn })
MERGE (person)-[r:BORN_IN]->(city)
RETURN person.name, person.bornIn, city",
s-37,merge,"MATCH (person:Person)
MERGE (person)-[r:HAS_CHAUFFEUR]->(chauffeur:Chauffeur { name: person.chauffeurName })
RETURN person.name, person.chauffeurName, chauffeur",
s-38,parameter,"{
  ""props"" : [ {
    ""name"" : ""Andy"",
    ""position"" : ""Developer""
  }, {
    ""name"" : ""Michael"",
    ""position"" : ""Developer""
  } ]
}
UNWIND $props AS map
CREATE (n)
SET n = map",
s-39,foreach,"MATCH p =(begin)-[*]->(END )
WHERE begin.name = 'A' AND END .name = 'D'
FOREACH (n IN nodes(p)| SET n.marked = TRUE )",
s-40,call,"UNWIND [0, 1, 2] AS x
CALL {
  WITH x
  RETURN x * 10 AS y
}
RETURN x, y",
s-41,post-union,"CALL {
  MATCH (p:Person) RETURN p ORDER BY p.age ASC LIMIT 1
  UNION
  MATCH (p:Person) RETURN p ORDER BY p.age DESC LIMIT 1
}
RETURN p.name, p.age ORDER BY p.name",
s-42,post-union,"MATCH (p:Person)
CALL {
  UNWIND range(1, 5) AS i
  CREATE (c:Clone)
  RETURN count(c) AS numberOfClones
}
RETURN p.name, numberOfClones",
s-43,post-union,"MATCH (p:Person)
CALL {
  WITH p
  MATCH (other:Person) WHERE other.age < p.age
  RETURN count(other) AS youngerPersonsCount
}
RETURN p.name, youngerPersonsCount",
s-44,post-union,CALL db.labels,
s-45,post-union,"CALL dbms.procedures() YIELD name, signature
WHERE name='dbms.listConfig'
RETURN signature",
s-46,post-union,CALL `db`.`labels`,
s-47,post-union,"CALL dbms.security.createUser('johnsmith', 'h6u4%kr', FALSE )",
s-48,post-union,"{
  ""username"" : ""johnsmith"",
  ""password"" : ""h6u4%kr"",
  ""requirePasswordChange"" : false
}
CALL dbms.security.createUser",
s-49,post-union,"{
  ""password"" : ""h6u4%kr""
}
CALL dbms.security.createUser('username', $password, 'requirePasswordChange')",
s-50,post-union,"CALL db.labels() YIELD label
RETURN count(label) AS numLabels",
s-51,post-union,"CALL db.labels() YIELD label
WHERE label CONTAINS 'User'
RETURN count(label) AS numLabels",
s-52,post-union,"CALL db.propertyKeys() YIELD propertyKey AS prop
MATCH (n)
WHERE n[prop] IS NOT NULL RETURN prop, count(n) AS numNodes",
s-53,LOAD,"LOAD CSV FROM '{csv-dir}/artists.csv' AS line
CREATE (:Artist { name: line[1], year: toInteger(line[2])})",
s-54,LOAD,"LOAD CSV WITH HEADERS FROM '{csv-dir}/artists-with-headers.csv' AS line
CREATE (:Artist { name: line.Name, year: toInteger(line.Year)})",
s-55,LOAD,"LOAD CSV FROM '{csv-dir}/artists-fieldterminator.csv' AS line FIELDTERMINATOR ';'
CREATE (:Artist { name: line[1], year: toInteger(line[2])})",
s-56,LOAD,"USING PERIODIC COMMIT
LOAD CSV FROM '{csv-dir}/artists.csv' AS line
CREATE (:Artist { name: line[1], year: toInteger(lin",
s-57,LOAD,"USING PERIODIC COMMIT 500
LOAD CSV FROM '{csv-dir}/artists.csv' AS line
CREATE (:Artist { name: line[1], year: toInteger(line[2])})",
s-58,LOAD,"LOAD CSV FROM '{csv-dir}/artists-with-escaped-char.csv' AS line
CREATE (a:Artist { name: line[1], year: toInteger(line[2])})
RETURN a.name AS name, a.year AS year, size(a.name) AS size",
s-59,LOAD,"LOAD CSV FROM '{csv-dir}/artists.csv' AS line
RETURN linenumber() AS number, line",
s-60,LOAD,"LOAD CSV FROM '{csv-dir}/artists.csv' AS line
RETURN DISTINCT file() AS path",
